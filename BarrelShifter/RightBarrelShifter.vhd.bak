-------------------------------------------------------------------------
-- Henry Duwe
-- Department of Electrical and Computer Engineering
-- Iowa State University
-------------------------------------------------------------------------


-- mux2t1_N.vhd
-------------------------------------------------------------------------
-- DESCRIPTION: This file contains an implementation of an N-bit wide 2:1
-- mux using structural VHDL, generics, and generate statements.
--
--
-- NOTES:
-- 1/6/20 by H3::Created.
-------------------------------------------------------------------------

library IEEE;
use IEEE.std_logic_1164.all;

entity RightBarrelShifter is
   generic(N : integer := 32); -- Generic of type integer for input/output data width. Default value is 32.
   port(i_signed      : in std_logic;
        i_WD          : in std_logic_vector(N-1 downto 0);
        i_SHAMT       : in std_logic_vector(5 downto 0);
        o_numShifted  : out std_logic_vector(N-1 downto 0));

end RightBarrelShifter;

architecture structural of RightBarrelShifter is

    component Decoder5_32 is 
       port(i_WA         : in std_logic_vector(4 downto 0);
            o_OUT        : out std_logic_vector(N-1 downto 0));
    end component;

    component mux2to1DF is
	port(i_D0 		            : in std_logic;
       	     i_D1		            : in std_logic;
             i_S 		            : in std_logic;
             o_O                            : out std_logic);
    end mux2to1DF;

type out32bit is array (31 downto 0,31 downto 0) of std_logic_vector;

signal s_shiftEN : std_logic_vector(31 downto 0) := "00000000000000000000000000000000";
signal s_ZERO  : std_logic_vector(31 downto 0) := "00000000000000000000000000000000";
signal s_ONE   : std_logic := '1';
signal s_OUT   : out32bit := ("00000000000000000000000000000000", "00000000000000000000000000000000", "00000000000000000000000000000000", "00000000000000000000000000000000",
			      "00000000000000000000000000000000", "00000000000000000000000000000000", "00000000000000000000000000000000", "00000000000000000000000000000000",
			      "00000000000000000000000000000000", "00000000000000000000000000000000", "00000000000000000000000000000000", "00000000000000000000000000000000",
			      "00000000000000000000000000000000", "00000000000000000000000000000000", "00000000000000000000000000000000", "00000000000000000000000000000000",
			      "00000000000000000000000000000000", "00000000000000000000000000000000", "00000000000000000000000000000000", "00000000000000000000000000000000",
			      "00000000000000000000000000000000", "00000000000000000000000000000000", "00000000000000000000000000000000", "00000000000000000000000000000000",
			      "00000000000000000000000000000000", "00000000000000000000000000000000", "00000000000000000000000000000000", "00000000000000000000000000000000",
			      "00000000000000000000000000000000", "00000000000000000000000000000000", "00000000000000000000000000000000", "00000000000000000000000000000000");

begin  

  decode5_32: Decoder5_32
	port MAP(i_WA		      => i_SHAMT,
		 o_OUT		      => s_shiftEN); 
  
  MUX: mux2to1DF port map(
              i_D1      => i_WD(0),    
              i_D0      => i_signed,         
              i_S       => s_shiftEN(0), 
	      o_O       => s_OUT(0,0));  

  G_NBit_MUX3: for i in 0 to N-2 generate
    	MUX1: mux2to1DF port map(
              i_D1      => i_WD(i+1),    
              i_D0      => i_WD(i),         
              i_S       => s_shiftEN(i+1), 
	      o_O       => s_OUT(0,i);  
  end generate G_NBit_MUX3;  
  
  -- Instantiate N mux instances.
  G_NBit_MUX1: for i in 0 to N-1 generate
     MUX4: mux2to1DF port map(
              i_D1      => s_OUT(i,0),    
              i_D0      => i_signed,         
              i_S       => s_shiftEN(i), 
	      o_O       => s_OUT(i+1,0));  

     G_NBit_MUX2: for j in 0 to N-2 generate
    	MUX5: mux2to1DF port map(
              i_D1      => s_OUT(i,j+1),    
              i_D0      => s_OUT(i,j),         
              i_S       => s_shiftEN(j+1), 
	      o_O       => s_OUT(i,j+1));  
     end generate G_NBit_MUX2;  
  end generate G_NBit_MUX1;

end structural;
